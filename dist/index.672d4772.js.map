{"mappings":"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","sources":["script.js"],"sourcesContent":["\"use strict\";\n\n// Selectors\nconst form = document.querySelector(\".form\");\nconst inputType = document.querySelector(\".form__input\");\nconst inputCadence = document.querySelector(\".form__input--cadence\");\nconst inputDistance = document.querySelector(\".form__input--distance\");\nconst inputDuration = document.querySelector(\".form__input--duration\");\nconst inputElevation = document.querySelector(\".form__input--elevation\");\nconst workoutBox = document.querySelector(\".workouts_container\");\n\n// Define Workout class\nclass Workout {\n  date = new Date();\n  id = Date.now();\n\n  constructor(distance, coords, duration) {\n    this.distance = distance;\n    this.coords = coords;\n    this.duration = duration;\n  }\n\n  // Description of every workout\n  // prettier-ignore\n  setDescription() {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    this.description = `${\n      inputType.value[0].toUpperCase() + inputType.value.slice(1)\n    } on ${months[this.date.getMonth() + 1].slice(0, 3)} ${this.date.getDate()}`;\n    return this.description;\n  }\n}\n\n// Define Running class as extend of Workout class\nclass Running extends Workout {\n  constructor(distance, coords, duration, cadence) {\n    super(distance, coords, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this.setDescription();\n  }\n  calcPace() {\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\n// Define Cycle class as extend of Workout class\nclass Cycle extends Workout {\n  constructor(distance, coords, duration, elevation) {\n    super(distance, coords, duration);\n    this.elevation = elevation;\n    this.calcSpeed();\n    this.setDescription();\n  }\n  calcSpeed() {\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\nclass App {\n  // Map variable\n  map;\n\n  // mapEvent varible to extract coordinates so they are available throug out the App\n  mapEvent;\n\n  // Array to store workouts\n  workouts = [];\n\n  // Unique workout ID\n  workoutID;\n\n  constructor() {\n    this.getPosition();\n\n    this.getLocalStorage();\n\n    // Attach handlers\n    // change between running and cylicling\n    inputType.addEventListener(\"change\", this.toggleElevationField);\n\n    // enter stroke on input field\n    form.addEventListener(\"keypress\", this.newWorkout.bind(this));\n\n    // move to a workout from the list\n    workoutBox.addEventListener(\"click\", this.moveToWorkout.bind(this));\n  }\n\n  getPosition() {\n    // Get my coordinates, if positive: open map and pin, if negative alert a message\n    navigator.geolocation.getCurrentPosition(\n      this.loadMap.bind(this),\n      function () {\n        alert(\"Please allow use of your location\");\n      }\n    );\n  }\n\n  loadMap(position) {\n    const { latitude, longitude } = position.coords;\n\n    // Leaflet Map, change the variable map\n    this.map = L.map(\"map\").setView([latitude, longitude], 13);\n\n    // Map\n    L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      maxZoom: 19,\n      attribution: \"Â© OpenStreetMap\",\n    }).addTo(this.map);\n\n    // Click map event listener\n    this.map.on(\"click\", this.showForm.bind(this));\n\n    // For each workout show the marker\n    this.workouts.forEach((work) => {\n      this.addMarker(work);\n    });\n  }\n\n  showForm(clickEvent) {\n    // change the mapevent variable and extract the coords\n    this.mapEvent = clickEvent;\n    const { lat, lng } = this.mapEvent.latlng;\n    form.classList.remove(\"hidden\");\n    inputDistance.focus();\n  }\n\n  toggleElevationField() {\n    inputCadence.closest(\".form__row\").classList.toggle(\"hidden\");\n    inputElevation.closest(\".form__row\").classList.toggle(\"hidden\");\n  }\n\n  newWorkout(e) {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      const { lat, lng } = this.mapEvent.latlng;\n      const distance = inputDistance.value;\n      const duration = inputDuration.value;\n      const cadence = inputCadence.value;\n      const elevation = inputElevation.value;\n      let workout;\n\n      //Check if every value is a number\n      const isNumber = function (...inputs) {\n        return inputs.every(function (inp) {\n          return !isNaN(inp);\n        });\n      };\n\n      //Check if every input is greater or equal than 0\n      const isPositive = function (...inputs) {\n        return inputs.every(function (inp) {\n          return inp > 0;\n        });\n      };\n\n      //Clear inputs\n\n      this.clearInput();\n\n      if (inputType.value === \"running\") {\n        if (\n          isNumber(distance, duration, cadence) &&\n          isPositive(distance, duration, cadence)\n        ) {\n          workout = new Running(distance, [lat, lng], duration, cadence);\n          workout.type = \"running\";\n        } else {\n          alert(\"Input must be a positive number\");\n          return;\n        }\n      }\n\n      if (inputType.value === \"cycling\") {\n        if (\n          isNumber(distance, duration, elevation) &&\n          isPositive(distance, duration)\n        ) {\n          workout = new Cycle(distance, [lat, lng], duration, elevation);\n          workout.type = \"cycling\";\n        } else {\n          alert(\"Input must be a positive number\");\n          return;\n        }\n      }\n\n      // Focus on distance field\n      inputDistance.focus();\n\n      // Push workout to an array\n      this.workouts.push(workout);\n\n      // Clear the input fields\n      this.clearInput();\n\n      // Add marker\n      this.addMarker(workout);\n\n      // Hide form\n      this.hideForm();\n\n      // HTML inject\n      this.injectHTML(workout);\n\n      // Set local storage\n      this.setLocalStorage(workout);\n    }\n  }\n\n  //Clear inputs fileds function\n  clearInput() {\n    inputDistance.value =\n      inputCadence.value =\n      inputDuration.value =\n      inputElevation.value =\n        \"\";\n  }\n\n  // Add marker function\n  addMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.map)\n      .bindPopup(`${workout.description}`, {\n        maxWidth: 250,\n        minWidth: 100,\n        autoClose: false,\n        closeOnClick: false,\n        className: `${workout.type}-popup`,\n      })\n      .openPopup();\n  }\n\n  hideForm() {\n    form.classList.add(\"hidden\");\n  }\n\n  injectHTML(workout) {\n    let html = `\n      <li class=\"workouts ${workout.type}\" data-id = ${workout.id}>\n        <div class=\"workout_box\">\n          <h2 class=\"workout_title\">\n            ${workout.type[0].toUpperCase() + workout.type.slice(1)}\n          </h2>\n          <div class=\"workout_details\">\n            <span class=\"workout_icon\">${\n              workout.type === \"running\" ? \"ðââï¸\" : \"ð´ââï¸\"\n            }</span>\n            <span class=\"workout_value\">${workout.distance}</span>\n            <span class=\"workout_unit\">km</span>\n          </div>\n          <div class=\"workout_details\">\n            <span class=\"workout_icon\">â±</span>\n            <span class=\"workout_value\">${workout.duration}</span>\n            <span class=\"workout_unit\">min</span>\n          </div>`;\n\n    if (workout.type === \"running\") {\n      html += `\n            <div class=\"workout_details\">\n              <span class=\"workout_icon\">â¡ï¸</span>\n              <span class=\"workout_value\">${workout.pace}</span>\n              <span class=\"workout_unit\">min/km</span>\n            </div>\n            <div class=\"workout_details\">\n              <span class=\"workout_icon\">ð¦¶ð¼</span>\n              <span class=\"workout_value\">${workout.cadence}</span>\n              <span class=\"workout_unit\">spm</span>\n            </div>\n          </div>\n        </li>`;\n    }\n\n    if (workout.type === \"cycling\") {\n      html += `\n              <div class=\"workout_details\">\n                <span class=\"workout_icon\">â¡ï¸</span>\n                <span class=\"workout_value\">${workout.speed}</span>\n                <span class=\"workout_unit\">min/km</span>\n              </div>\n              <div class=\"workout_details\">\n                <span class=\"workout_icon\">â°</span>\n                <span class=\"workout_value\">${workout.elevation}</span>\n                <span class=\"workout_unit\">spm</span>\n              </div>\n            </div>\n          </li>`;\n    }\n\n    form.insertAdjacentHTML(\"afterend\", html);\n  }\n\n  moveToWorkout(e) {\n    // if the user clicks outside the workouts container the return\n    if (!e.target.closest(\".workouts\")) return;\n\n    //extract workout id on the clicked container\n    //if that id matches the id from an element in the workout array, then extract coords from that element\n    let workoutID = e.target.closest(\".workouts\").dataset.id;\n    for (let i = 0; i <= this.workouts.length - 1; i++) {\n      if (workoutID == this.workouts[i].id) {\n        const [latitude, longitude] = this.workouts[i].coords;\n        this.map.setView([latitude, longitude], 13);\n      }\n    }\n  }\n\n  setLocalStorage() {\n    localStorage.setItem(\"workouts\", JSON.stringify(this.workouts));\n  }\n\n  getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem(\"workouts\"));\n\n    if (!data) return;\n\n    this.workouts = data;\n\n    this.workouts.forEach((work) => {\n      this.injectHTML(work);\n    });\n  }\n}\n\nconst app = new App();\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}